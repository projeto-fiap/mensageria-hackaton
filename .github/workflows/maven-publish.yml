name: pipeline

on:
  push:
  pull_request:
    types: [closed, opened, synchronize, reopened]

jobs:
  build:
    name: Build
    runs-on: ubuntu-latest
    permissions:
      contents: read
      packages: write

    steps:
      - uses: actions/checkout@v4

      - name: Install Java and Maven
        uses: actions/setup-java@v4
        with:
          java-version: '17'
          distribution: 'adopt'
          cache: maven

      - name: Cache Maven packages
        uses: actions/cache@v4
        with:
          path: ~/.m2
          key: ${{ runner.os }}-m2-${{ hashFiles('**/pom.xml') }}
          restore-keys: ${{ runner.os }}-m2

      - name: Install Kubectl
        run: |
          curl -LO "https://dl.k8s.io/release/$(curl -L -s https://dl.k8s.io/release/stable.txt)/bin/linux/amd64/kubectl"
          chmod +x kubectl
          sudo mv kubectl /usr/local/bin/

      - name: Clean and Compile
        run: mvn clean compile

  unit-tests:
    name: Unit Tests
    runs-on: ubuntu-latest
    needs: build
    permissions:
      contents: read
      packages: write

    steps:
      - uses: actions/checkout@v4

      - name: Install Java and Maven
        uses: actions/setup-java@v4
        with:
          java-version: '17'
          distribution: 'adopt'
          cache: maven

      - name: Cache Maven packages
        uses: actions/cache@v4
        with:
          path: ~/.m2
          key: ${{ runner.os }}-m2-${{ hashFiles('**/pom.xml') }}
          restore-keys: ${{ runner.os }}-m2

      - name: Unit Tests
        env:
          SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}
        run: mvn '-Dtest=!integration.**' test org.sonarsource.scanner.maven:sonar-maven-plugin:sonar -DsonarToken=$SONAR_TOKEN

  integrated-tests:
    name: Integrated Tests
    runs-on: ubuntu-latest
    needs: unit-tests
    permissions:
      contents: read
      packages: write

    steps:
      - uses: actions/checkout@v4

      - name: Install Java and Maven
        uses: actions/setup-java@v4
        with:
          java-version: '17'
          distribution: 'adopt'
          cache: maven

      - name: Cache Maven packages
        uses: actions/cache@v4
        with:
          path: ~/.m2
          key: ${{ runner.os }}-m2-${{ hashFiles('**/pom.xml') }}
          restore-keys: ${{ runner.os }}-m2

      - name: Integration Tests
        env:
          SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}
        run: mvn '-Dtest=integration.**' test

  analysis-sonarqube:
    name: Quality Gate
    runs-on: ubuntu-latest
    needs: unit-tests
    steps:
      - uses: actions/checkout@v4
        with:
          fetch-depth: 0
      - name: Sonar Build Breaker
        env:
          GITHUB_REF_NAME: ${{ github.ref_name }}
        uses: jkumar19/sonar-build-breaker@v1.0.0
        with:
          sonar_url: "https://sonarcloud.io"
          sonar_branch: ${{ env.GITHUB_REF_NAME }}
          sonar_token: ${{ secrets.SONAR_TOKEN }}
          project_key: "projeto_mensageria-hackaton"

  send-docker-hub:
    name: Send Docker HUB
    runs-on: ubuntu-latest
    needs:
      - analysis-sonarqube
      - integrated-tests
    if: github.ref == 'refs/heads/main'
    steps:
      - name: Log in to Docker Hub
        uses: docker/login-action@v2
        with:
          username: ${{ secrets.DOCKER_HUB_USERNAME }}
          password: ${{ secrets.DOCKER_HUB_PASSWORD }}

      - name: Clone Repository and Build Image
        run: |
          git clone https://github.com/projeto-fiap/mensageria-hackaton.git
          cd mensageria-hackaton
          docker build . -t matheuspatricio0/mensageria-hackaton:latest

      - name: Push Docker image
        run: docker push matheuspatricio0/mensageria-hackaton:latest

  deploy-prd:
    runs-on: ubuntu-latest
    environment:
      name: prd
    needs:
      - send-docker-hub
    if: github.ref == 'refs/heads/main'
    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Configure AWS Credentials
        uses: aws-actions/configure-aws-credentials@v1
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: us-east-1
          aws-session-token: ${{ secrets.AWS_SESSION_TOKEN }}

      - name: Update Kube Config
        run: aws eks update-kubeconfig --name kubernetes-hackaton --region us-east-1

      - name: Current Context
        run: kubectl config current-context

      - name: Create Kubernetes Secrets from GitHub Envs
        run: |
          kubectl delete secret mensageria-env-secrets --ignore-not-found -n default-namespace
          kubectl create secret generic mensageria-env-secrets \
            --from-literal=KAFKA_SERVER=${{ secrets.KAFKA_SERVER }} \
            --from-literal=KEYCLOAK_URL=${{ secrets.KEYCLOAK_URL }} \
            --from-literal=VIDEO_SERVICE_URL=${{ secrets.VIDEO_SERVICE_URL }} \
            --from-literal=ISSUER_URI=${{ secrets.ISSUER_URI }} \
            --from-literal=SPRING_MAIL_USERNAME=${{ secrets.SPRING_MAIL_USERNAME }} \
            --from-literal=SPRING_MAIL_PASSWORD=${{ secrets.SPRING_MAIL_PASSWORD }} \
            -n default-namespace

      - name: Deploy Kubernetes Resources
        run: |
          kubectl apply -f src/main/resources/deploy/k8s/mensageria-hackaton-deployment.yaml -n default-namespace
          kubectl apply -f src/main/resources/deploy/k8s/hpa-mensageria-hackaton.yaml -n default-namespace
          kubectl apply -f src/main/resources/deploy/k8s/service-mensageria-hackaton.yaml -n default-namespace
